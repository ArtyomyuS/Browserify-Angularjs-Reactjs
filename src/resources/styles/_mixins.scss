@mixin transition($transition-property, $transition-time, $method, $delay) {
  -webkit-transition: $transition-time $delay $transition-property $method;
  -moz-transition: $transition-time $delay $transition-property $method;
  -ms-transition: $transition-time $delay $transition-property $method;
  -o-transition: $transition-time $delay $transition-property $method;
  transition: $transition-time $delay $transition-property $method;

}

@mixin transition-delay($delay, $property) {
  -webkit-transition: $delay $property;
  -webkit-transition-delay: 5 $delay;
  -moz-transition: $delay $property;
  -moz-transition-delay: 5 $delay;
  -ms-transition: $delay $property;
  -ms-transition-delay: $delay;
  -o-transition: $delay $property;
  -o-transition-delay: $delay;
  transition: $delay $property;
  transition-delay: $delay;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $color;
    -moz-box-shadow: inset $top $left $blur $color;
    box-shadow: inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

// generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms translateZ(0);
  -o-transform: $transforms translateZ(0);
  -ms-transform: $transforms translateZ(0);
  -webkit-transform: $transforms translateZ(0);;
  transform: $transforms translateZ(0);
}

// rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($x, $y) {
  @include transform(scale($x, $y));
}

// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

// skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin($origin) {
  moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin animation($delay, $duration, $animation, $easing) {
  -webkit-animation-delay: $delay;
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $animation;
  -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
  -webkit-animation-timing-function: $easing;

  -moz-animation-delay: $delay;
  -moz-animation-duration: $duration;
  -moz-animation-name: $animation;
  -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
  -moz-animation-timing-function: $easing;

  -o-animation-delay: $delay;
  -o-animation-duration: $duration;
  -o-animation-name: $animation;
  -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
  -o-animation-timing-function: $easing;

  -ms-animation-delay: $delay;
  -ms-animation-duration: $duration;
  -ms-animation-name: $animation;
  -ms-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
  -ms-animation-timing-function: $easing;

  animation-delay: $delay;
  animation-duration: $duration;
  animation-name: $animation;
  animation-fill-mode: forwards; /* this prevents the animation from restarting! */
  animation-timing-function: $easing;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin appearance($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}

//usage:
//@include filter(grayscale, 100%);
// grayscale      ex: filter: grayscale(100%);
// sepia          ex: filter: sepia(100%);
// saturate       ex: filter: saturate(0%);
// hue-rotate     ex: filter: hue-rotate(45deg);
// invert         ex: filter: invert(100%);
// brightness     ex: filter: brightness(15%);
// contrast       ex: filter: contrast(200%);
// blur           ex: filter: blur(2px);

@mixin filter($filter-type, $filter-amount) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

@mixin user-select($value) {
  -webkit-user-select: $value;
  -khtml-user-select: $value;
  -moz-user-select: $value;
  -ms-user-select: $value;
  user-select: $value;
}

@mixin text-size-adjust($value) {
  -webkit-text-size-adjust: $value;
  -moz-text-size-adjust: $value;
  -ms-text-size-adjust: $value;
  -o-text-size-adjust: $value;
  text-size-adjust: $value;
}

@mixin gradient-top-bottom($color-start, $color-end) {

  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $color-start), color-stop(99%, $color-end), color-stop(100%, $color-end));
  background: -webkit-linear-gradient(top, $color-start 0%, $color-end 99%, $color-end 100%);
  background: -o-linear-gradient(top, $color-start 0%, $color-end 99%, $color-end 100%);
  background: -ms-linear-gradient(top, $color-start 0%, $color-end 99%, $color-end 100%);
  //background: -moz-linear-gradient(top, $color-start 0%, $color-end 99%, $color-end 100%);
  // background: linear-gradient(to bottom, $color-start 0%, $color-end 99%, $color-end 100%);
}

@mixin gpu-promote() {
  -webkit-transform: translateZ(0);
}

@mixin respond-to($media) {
  @if $media == small-screens {
    /* iPads (landscape) ----------- */
    @media #{$ipadLandscape} {
      @content;
    }
    /* iPads (portrait) ----------- */
    @media #{$ipadPortrait} {
      @content;
    }
  } @else if $media == medium-screens {
    /* iPads (landscape) ----------- */
    @media #{$ipadLandscape} {
      @content;
    }
    /* iPads (portrait) ----------- */
    @media #{$ipadPortrait} {
      @content;
    }
  } @else if $media == wide-screens {
    /* Desktops ----------- */
    @media #{$desktop} {
      @content;
    }

  }
}

@mixin backdropFilter($amount) {
  backdrop-filter: blur(#{$amount}px);
  -webkit-backdrop-filter: blur(#{$amount}px);
}

@mixin getEngineStatusIcon() {
  @extend %genericSmallIcon;
  &:hover {
    color: $primary-color-hover;
  }
  &.Run {
    color: green;
    &:before {
      content: "\f04b";
    }
  }
  &.Stop {
    &:before {
      content: "\f04d";
    }
  }
  &.Pause {
    color: #ffff00;
    &:before {
      content: "\f04c";
    }
  }
}